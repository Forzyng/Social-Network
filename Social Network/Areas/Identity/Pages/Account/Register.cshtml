@page
@model RegisterModel
@{
    ViewData["Title"] = "Register";
}

<h1>@ViewData["Title"]</h1>

<div class="row">
    <div class="col-md-4">
        <form asp-route-returnUrl="@Model.ReturnUrl" method="post">
            <h4>Create a new account.</h4>
            <hr />
            <div asp-validation-summary="All" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Input.Email"></label>
                <input asp-for="Input.Email" class="form-control" />
                <span asp-validation-for="Input.Email" class="text-danger"></span>
            </div>
            
            <div class="form-group">
                <label asp-for="Input.Login"></label>
                <input asp-for="Input.Login" class="form-control" id="regLoginInput"/>
                <span asp-validation-for="Input.Login" id="regLoginSpan" class="IsNotUnique"></span>
            </div>

            <div class="form-group">
                <label asp-for="Input.TelegramId"></label>
                <input asp-for="Input.TelegramId" class="form-control" />
                <span asp-validation-for="Input.TelegramId" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Input.Fullname"></label>
                <input asp-for="Input.Fullname" class="form-control" />
                <span asp-validation-for="Input.Fullname" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Input.Password"></label>
                <input asp-for="Input.Password" class="form-control" />
                <span asp-validation-for="Input.Password" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Input.ConfirmPassword"></label>
                <input asp-for="Input.ConfirmPassword" class="form-control" />
                <span asp-validation-for="Input.ConfirmPassword" class="text-danger"></span>
            </div>
            <button type="submit" class="btn btn-primary">Register</button>
        </form>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h4>Use another service to register.</h4>
            <hr />
            @{
                if ((Model.ExternalLogins?.Count ?? 0) == 0)
                {
                    <div>
                        <p>
                            There are no external authentication services configured. See <a href="https://go.microsoft.com/fwlink/?LinkID=532715">this article</a>
                            for details on setting up this ASP.NET application to support logging in via external services.
                        </p>
                    </div>
                }
                else
                {
                    <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="form-horizontal">
                        <div>
                            <p>
                                @foreach (var provider in Model.ExternalLogins)
                                {
                                    <button type="submit" class="btn btn-primary" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
                                }
                            </p>
                        </div>
                    </form>
                }
            }
        </section>
    </div>
</div>

@section Scripts {

    <script>


        function GetLoginIdentity(login)
        {
            console.log("Check login");
            fetch("/api/IsUserNameUnique/" + login.value)
                .then(res => res.json())
                .then(dirs => {
                    console.log(dirs);
                    if (dirs[0] === "The Login is not unique") {

                        document.getElementById("regLoginSpan").innerText = dirs[0];

                        document.getElementById("regLoginSpan").classList.remove("IsNotUnique");
                        document.getElementById("regLoginSpan").classList.remove("IsUnique");

                        document.getElementById("regLoginSpan").classList.add("IsNotUnique");
                    }
                    else {
                        document.getElementById("regLoginSpan").innerText = dirs[0];

                        document.getElementById("regLoginSpan").classList.remove("IsNotUnique");
                        document.getElementById("regLoginSpan").classList.remove("IsUnique");

                        document.getElementById("regLoginSpan").classList.add("IsUnique");
                    }
                }).catch(err => { console.log(err) })
        }
        let login = document.getElementById("regLoginInput");



        login.onchange = function () {
            console.log("start");

            
            if (login === undefined || login === null || login.length > 15 || login.length < 3) {
                document.getElementById("regLoginSpan").innerText = "The Login must be at least 3 and at max 15 characters long.";
                document.getElementById("regLoginSpan").classList.remove("IsNotUnique");
                document.getElementById("regLoginSpan").classList.remove("IsUnique");

                document.getElementById("regLoginSpan").classList.add("IsNotUnique");
                return;
            } else
            {
                GetLoginIdentity(login);

                    
            }
            
        }
    </script>

    <partial name="_ValidationScriptsPartial" />
}
